section .data
    array dd 14, 7, 25, 9, 17, 36, 8, 42, 11    ; Ejemplo de arreglo (ajusta según tus necesidades)
    ;array_size equ $ - array               ; Tamaño del arreglo
	 array_size dd 9
      result dd 0

section .text
    global _start

_start:
    ; Llamada a la función para encontrar el número mayor
    mov r8, array        ; Puntero al inicio del arreglo
    mov ecx, array_size   ; Tamaño del arreglo
	
	find_max:
    ; Función para encontrar el número mayor en un arreglo
    ; Entrada: r8 - Puntero al inicio del arreglo, ecx - Tamaño del arreglo
    ; Salida: eax - Número mayor

    ; Inicializar el máximo actual con el primer elemento del arreglo
    mov eax, [r8]

    ; Bucle para recorrer el arreglo y comparar cada elemento con el máximo actual
    find_max_loop:
        add r8, 4             ; Avanzar al siguiente elemento (suponiendo enteros de 4 bytes)
        cmp r8, [array + ecx*4] ; Comprobar si hemos llegado al final del arreglo
        je test       ; Si es el final, salir del bucle

        ; Comparar el elemento actual con el máximo actual
        cmp eax, [r8]
        jge find_max_loop      ; Si el máximo actual es mayor o igual, continuar con el siguiente elemento

        ; Si el elemento actual es mayor, actualizar el máximo actual
        mov eax, [r8]
        jmp find_max_loop


    ; En este punto, el número mayor se encuentra en eax
        mov [result], eax
test:				; pushea en pila el resultado
	xor rcx, rcx
	mov r8, 10	
	mov rcx, [result]	
	mov rbx, 0
	xor rdx, rdx

division:
	mov rax, rcx
	cmp rax, r8 
	jl aux

	div r8 ;rdx residuo rax cociente
	inc rbx
	push rdx

	mov rcx, rax
	jmp division

aux:
	push rax
	inc rbx

loopprint:			; popea e imprime cad dígito
	cmp rbx,0
	je final
	dec rbx
	pop rcx
	
	add rcx, 30H
	mov [result], rcx

	mov rax, 1
	mov rdi, 1
	mov rsi, result
	mov rdx, 1
	syscall
	jmp loopprint
 
final:			; sale del programa de forma exitosa 
; SYS_EXIT
	mov rax, 60
	mov rdi, 0
	syscall 
